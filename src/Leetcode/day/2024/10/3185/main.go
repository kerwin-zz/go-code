package main

/*
	给你一个整数数组 hours，表示以 小时 为单位的时间，返回一个整数，表示满足 i < j 且 hours[i] + hours[j] 构成 整天 的下标对 i, j 的数目。

	整天 定义为时间持续时间是 24 小时的 整数倍 。

	例如，1 天是 24 小时，2 天是 48 小时，3 天是 72 小时，以此类推。
*/

/*
	举几个例子：
	· 如果 hours[i]=1，那么需要知道左边有多少个模 24 是 23 的数，这些数加上 1 都是 24 的倍数。
	· 如果 hours[i]=2，那么需要知道左边有多少个模 24 是 22 的数，这些数加上 2 都是 24 的倍数。
	· 如果 hours[i]=26，那么需要知道左边有多少个模 24 是 22 的数，这些数加上 26 都是 24 的倍数。
	一般地，对于 hours[i]，需要知道左边有多少个模 24 是 24−hours[i]mod24 的数。
	特别地，如果 hours[i] 模 24 是 0，那么需要知道左边有多少个模 24 也是 0 的数。

	这两种情况可以合并为：累加左边

*/

func countCompleteDayPairs(hours []int) (ans int64) {
	const H = 24
	cnt := [H]int{}
	for _, t := range hours {
		// 先查询 cnt，再更新 cnt，因为题目要求 i < j
		// 如果先更新，再查询，就把 i = j 的情况也考虑进去了
		ans += int64(cnt[(H-t%H)%H])
		cnt[t%H]++
	}
	return
}
