package main

import "slices"

/*
	给你一个下标从 0 开始的整数数组 nums 和一个 非负 整数 k 。
	在一步操作中，你可以执行下述指令：
	· 在范围 [0, nums.length - 1] 中选择一个 此前没有选过 的下标 i 。
	· 将 nums[i] 替换为范围 [nums[i] - k, nums[i] + k] 内的任一整数。

	数组的 美丽值 定义为数组中由相等元素组成的最长子序列的长度。
	对数组 nums 执行上述操作任意次后，返回数组可能取得的 最大 美丽值。
	注意：你 只 能对每个下标执行 一次 此操作。
	数组的 子序列 定义是：经由原数组删除一些元素（也可能不删除）得到的一个新数组，且在此过程中剩余元素的顺序不发生改变。
*/

/*
	示例 1 nums = [4,6,1,2], k = 2
	由于选的是子序列，且操作后子序列的元素都相等，所以元素顺序对答案没有影响，可以先对数组排序。
	示例 1 排序后 nums = [1,2,4,6]。由于每个数 x 可以改成闭区间 [x-k,x+k] 中的数，我们把示例 1 的每个数看成闭区间，也就是
	[-1,3], [0,4], [2,6], [4,8]
	题目要求的「由相等元素组成的最长子序列」，相当于选出若干闭区间，这些区间的交集不为空。
	排序后，选出的区间还是连续的，我们只需考虑最左边的区间 [x-k,x+k] 和最右边的区间 [y-k,y+k]，如果这两个区间的交集不为空，那么
	选出的这些区间的交集不为空。也就是说，要满足
							x+k >= y-k
	即
							y-x <= 2k

	于是愿问题等价于：
	· 排序后，找最长的连续子数组，其最大值减最小值不超过 2k。
	只要子数组满足这个要求，对应的区间的交集就不为空，也就是子数组的元素都可以变成同一个数。

	这可以用 「滑动窗口」 解决。枚举 nums[right] 作为子数组的最后一个数，一旦 nums[right] - nums[left] > 2k，就移动左端点 left。
	左端点停止移动时，下标在 [left,right] 的子数组就是满足要求的子数组，用子数组长度 right - left + 1 更新答案的最大值。
*/

func maximumBeauty(nums []int, k int) (ans int) {
	slices.Sort(nums)
	left := 0
	for right, x := range nums {
		for x-nums[left] > k*2 {
			left++
		}
		ans = max(ans, right-left+1)
	}
	return
}
