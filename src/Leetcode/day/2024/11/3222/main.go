package main

/*
	给你两个 正 整数 x 和 y ，分别表示价值为 75 和 10 的硬币的数目。

	Alice 和 Bob 正在玩一个游戏。每一轮中，Alice 先进行操作，Bob 后操作。每次操作中，玩家需要拿出价值 总和 为 115 的硬币。如果一名玩家无法执行此操作，那么这名玩家 输掉 游戏。

	两名玩家都采取 最优 策略，请你返回游戏的赢家。
*/

/*
	分析
	因为 10 的倍数不可能等于 115，所以面额为 10 的硬币不能单独选，至少要选 1 个面额为 75 的硬币。
	又由于 75⋅2=150>115，所以面额为 75 的硬币要恰好选 1 个。
	由于 75+10⋅4=115，所以面额为 10 的硬币要恰好选 4 个。
	本质上来说，我们在求解二元一次不定方程 75a+10b=115，它有唯一正整数解 a=1,b=4。
	如果一开始 Alice 就没法选，或者偶数轮后 Alice 没法选，那么 Bob 胜出，否则 Alice 胜出。

	结论
	设 k=min(x,⌊y/4⌋)，这是能玩的回合数。
	判断 k 的奇偶性，奇数 Alice 胜，偶数 Bob 胜。
*/

func losingPlayer(x int, y int) string {
	return [2]string{"Bob", "Alice"}[min(x, y/4)%2]
}
