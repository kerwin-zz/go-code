package main

/*
	有 n 个人前来排队买票，其中第 0 人站在队伍 最前方 ，第 (n - 1) 人站在队伍 最后方 。

	给你一个下标从 0 开始的整数数组 tickets ，数组长度为 n ，其中第 i 人想要购买的票数为 tickets[i] 。

	每个人买票都需要用掉 恰好 1 秒 。一个人 一次只能买一张票 ，如果需要购买更多票，他必须走到  队尾 重新排队（瞬间 发生，不计时间）。如果一个人没有剩下需要买的票，那他将会 离开 队伍。

	返回位于位置 k（下标从 0 开始）的人完成买票需要的时间（以秒为单位）。
*/

/*
	想一想，当第 k 个人完成买票的那一刻，在他前后的人，分别买了多少票？

	假设第 k 个人此时买了 3 张票，那么排在他前面的人，此时也至多买了 3 张票；排在他后面的人，此时至多买了 2 张票。

	把 tickets 简记为 t。一般地，当第 k 个人买了 tk 张票时：
	1. 排在他前面的人，买的票不会超过 tk，即 min(ti,tk)。
	2. 排在他后面的人，买的票不会超过 tk−1，即 min(ti,tk−1)。
	累加所有购票数即为答案。
*/

func timeRequiredToBuy(tickets []int, k int) (ans int) {
	tk := tickets[k]
	for i, t := range tickets {
		if i <= k {
			ans += min(t, tk)
		} else {
			ans += min(t, tk-1)
		}
	}
	return
}
