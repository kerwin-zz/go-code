package main

/*
	给你一个下标从 0 开始的 正 整数数组 nums 。

	如果 nums 的一个子数组满足：移除这个子数组后剩余元素 严格递增 ，那么我们称这个子数组为 移除递增 子数组。比方说，[5, 3, 4, 6, 7] 中的 [3, 4] 是一个移除递增子数组，因为移除该子数组后，[5, 3, 4, 6, 7] 变为 [5, 6, 7] ，是严格递增的。

	请你返回 nums 中 移除递增 子数组的总数目。

	注意 ，剩余元素为空的数组也视为是递增的。

	子数组 指的是一个数组中一段连续的元素序列。
*/

func incremovableSubarrayCount(a []int) int64 {
	n := len(a)
	i := 0
	for i < n-1 && a[i] < a[i+1] {
		i++
	}
	if i == n-1 { // 每个非空子数组都可以移除
		return int64(n) * int64(n+1) / 2
	}

	ans := int64(i + 2) // 不保留后缀的情况，一共 i+2 个
	// 枚举保留的后缀为 a[j:]
	for j := n - 1; j == n-1 || a[j] < a[j+1]; j-- {
		for i >= 0 && a[i] >= a[j] {
			i--
		}
		// 可以保留前缀 a[:i+1], a[:i], ..., a[:0] 一共 i+2 个
		ans += int64(i + 2)
	}
	return ans
}
