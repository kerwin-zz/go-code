package main

import "slices"

/*
	给你一个仅由小写英文字母组成的字符串 s 。

	如果一个字符串仅由单一字符组成，那么它被称为 特殊 字符串。例如，字符串 "abc" 不是特殊字符串，而字符串 "ddd"、"zz" 和 "f" 是特殊字符串。

	返回在 s 中出现 至少三次 的 最长特殊子字符串 的长度，如果不存在出现至少三次的特殊子字符串，则返回 -1 。

	子字符串 是字符串中的一个连续 非空 字符序列。
*/

/*
	由于特殊子串只包含单一字母，我们按照相同字母分组，每组统计相同字母连续出现的长度。例如字符串 aaaabbbabb 分成
	aaaa+bbb+a+bb 四组，字母 a 有长度 4 和长度 1，字母 b 有长度 3 和长度 2。所以字母 a 的长度列表为 [4,1]，
	字母 b 的长度为 [3,2]。

	遍历每个字母对应的长度列表 a，把 a 从大到小排序。

	有哪些取出三个特殊子串的方法呢？
	· 从最长的特殊子串 (a[0]) 中取三个长度均为 a[0]-2 的特殊子串。例如示例 1 的 aaaa 可以取三个 aa。
	· 或者，从最长和次长的特殊子串（a[0],a[1]）中取三个长度一样的特殊子串：
		· 如果 a[0] = a[1]，那么可以取三个长度均为 a[0]-1 的特殊子串。
		· 如果 a[0] > a[1]，那么可以去三个长度均为 a[1] 的特殊子串：从最长中取两个，从次长中取一个。
		· 这两种情况合并成 min(a[0]-1,a[1])。
	· 又或者，从最长、次长、第三长的特殊子串（a[0],a[1],a[2]）中各取一个长为 a[2] 的特殊子串。

	这三种情况取最大值，即
							max(a[0]-2,min(a[0]-1,a[1]),a[2])

	对每个长度列表计算上式，取最大值即为答案。
	如果答案是 0，返回 -1。

	代码实现时，在数组结尾加两个 0，就无需特判 a 长度小于 3 的情况了。
*/

func maximumLength(s string) int {
	groups := [26][]int{}
	cnt := 0
	for i := range s {
		cnt++
		if i+1 == len(s) || s[i] != s[i+1] {
			groups[s[i]-'a'] = append(groups[s[i]-'a'], cnt) // 统计连续自负长度
			cnt = 0
		}
	}

	ans := 0
	for _, a := range groups {
		if len(a) == 0 {
			continue
		}
		slices.SortFunc(a, func(a, b int) int { return b - a })
		a = append(a, 0, 0) // 假设还有两个空串
		ans = max(ans, a[0]-2, min(a[0]-1, a[1]), a[2])
	}

	if ans == 0 {
		return -1
	}
	return ans
}
